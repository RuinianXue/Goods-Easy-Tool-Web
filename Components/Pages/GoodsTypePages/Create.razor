@page "/goodstypes/create"
@using Microsoft.EntityFrameworkCore
@using GoodsWebApp.Models
@inject IDbContextFactory<GoodsWebApp.Data.GoodsWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>GoodsType</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="GoodsType" OnValidSubmit="AddGoodsType" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="goodstypename" class="form-label">GoodsTypeName:</label> 
                <InputText id="goodstypename" @bind-Value="GoodsType.GoodsTypeName" class="form-control" /> 
                <ValidationMessage For="() => GoodsType.GoodsTypeName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="priceintotal" class="form-label">PriceInTotal:</label> 
                <InputNumber id="priceintotal" @bind-Value="GoodsType.PriceInTotal" class="form-control" /> 
                <ValidationMessage For="() => GoodsType.PriceInTotal" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="limitamount" class="form-label">LimitAmount:</label> 
                <InputNumber id="limitamount" @bind-Value="GoodsType.LimitAmount" class="form-control" /> 
                <ValidationMessage For="() => GoodsType.LimitAmount" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/goodstypes">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private GoodsType GoodsType { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddGoodsType()
    {
        using var context = DbFactory.CreateDbContext();
        context.GoodsType.Add(GoodsType);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/goodstypes");
    }
}
