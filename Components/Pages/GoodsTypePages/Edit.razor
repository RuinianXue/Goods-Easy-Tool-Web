@page "/goodstypes/edit"
@using Microsoft.EntityFrameworkCore
@using GoodsWebApp.Models
@inject IDbContextFactory<GoodsWebApp.Data.GoodsWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>GoodsType</h2>
<hr />
@if (GoodsType is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="GoodsType" OnValidSubmit="UpdateGoodsType" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="GoodsType.GoodsTypeID" value="@GoodsType.GoodsTypeID" />
                <div class="mb-3">
                    <label for="goodstypename" class="form-label">GoodsTypeName:</label>
                    <InputText id="goodstypename" @bind-Value="GoodsType.GoodsTypeName" class="form-control" />
                    <ValidationMessage For="() => GoodsType.GoodsTypeName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="priceintotal" class="form-label">PriceInTotal:</label>
                    <InputNumber id="priceintotal" @bind-Value="GoodsType.PriceInTotal" class="form-control" />
                    <ValidationMessage For="() => GoodsType.PriceInTotal" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="limitamount" class="form-label">LimitAmount:</label>
                    <InputNumber id="limitamount" @bind-Value="GoodsType.LimitAmount" class="form-control" />
                    <ValidationMessage For="() => GoodsType.LimitAmount" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/goodstypes">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int GoodsTypeID { get; set; }

    [SupplyParameterFromForm]
    private GoodsType? GoodsType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        GoodsType ??= await context.GoodsType.FirstOrDefaultAsync(m => m.GoodsTypeID == GoodsTypeID);

        if (GoodsType is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateGoodsType()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(GoodsType!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GoodsTypeExists(GoodsType!.GoodsTypeID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/goodstypes");
    }

    private bool GoodsTypeExists(int goodstypeid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.GoodsType.Any(e => e.GoodsTypeID == goodstypeid);
    }
}
