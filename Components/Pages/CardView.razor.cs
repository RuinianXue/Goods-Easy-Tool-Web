// <auto-generated />
using GoodsWebApp.Models;
using Microsoft.AspNetCore.Components;
using Microsoft.EntityFrameworkCore;
using Microsoft.JSInterop;

namespace GoodsWebApp.Components.Pages
{
    public partial class CardView
    {
        private bool isCreatingNew = false;
        private bool isStepTwo = false; // 新增变量控制步骤
        [SupplyParameterFromForm]
        private GoodsBatch newGoodsBatch { get; set; } = new();
        private List<GoodsBatch> existingGoodsBatches = new List<GoodsBatch>();
        private GoodsBatch selectedGoodsBatch;

        private DateTime beginDate = DateTime.Today;
        private string beginTime = "00:00";
        private DateTime endDate = DateTime.Today;
        private string endTime = "23:59";

        private void InitializeNewGoodsBatch()
        {
            newGoodsBatch = new GoodsBatch
            {
                GoodsBatchName = DateTime.Now.ToString("yyyyMMdd-"),
                // 其他属性可以根据需要设置默认值
            };
            beginDate = DateTime.Today; // 设置开始日期为今天
            beginTime = DateTime.Now.ToString("HH:mm"); // 设置开始时间为当前时间
            endDate = DateTime.Today.AddDays(7); // 设置结束日期为一周后
            endTime = beginTime; // 设置结束时间为与开始时间相同
        }

        protected override async Task OnInitializedAsync()
        {
            await LoadExistingGoodsBatches();
            await SelectDefaultGoodsBatch();
            currentBatchTypes = await GetTypesForSelectedBatch(); // 获取当前批次的类型
            InitializeNewGoodsBatch(); // 初始化新的GoodsBatch
        }

        private async Task LoadExistingGoodsBatches()
        {
            try
            {
                using var context = await DbFactory.CreateDbContextAsync();
                existingGoodsBatches = await context.GoodsBatch
                    .OrderByDescending(b => b.GoodsBeginTime.Date)
                    .ThenBy(b => b.GoodsBatchName)
                    .ToListAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading existing GoodsBatches: {ex.Message}");
                // 可以在这里添加更多的错误处理逻辑
            }
        }

        private async Task SelectDefaultGoodsBatch()
        {
            if (existingGoodsBatches.Any())
            {
                var latestDate = existingGoodsBatches.First().GoodsBeginTime.Date;
                selectedGoodsBatch = existingGoodsBatches
                    .Where(b => b.GoodsBeginTime.Date == latestDate)
                    .OrderByDescending(b => b.GoodsBatchName)
                    .First();

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                    JSRuntime.InvokeVoidAsync("setSelectValue", "existingBatch", selectedGoodsBatch.GoodsBatchID.ToString());
                });
            }
        }

        private void OnBatchSelectionChange(ChangeEventArgs e)
        {
            isCreatingNew = e.Value.ToString() == "new";
            selectedGoodsBatch = null;
            if (isCreatingNew)
            {
                InitializeNewGoodsBatch();
            }
            else
            {
                isStepTwo = true; // 进入第二步
            }
        }

        private async Task CreateNewGoodsBatch()
        {
            // 合并日期和时间
            newGoodsBatch.GoodsBeginTime = CombineDateAndTime(beginDate, beginTime);
            newGoodsBatch.GoodsEndTime = CombineDateAndTime(endDate, endTime);

            using var context = await DbFactory.CreateDbContextAsync();
            context.GoodsBatch.Add(newGoodsBatch);
            await context.SaveChangesAsync();
            await LoadExistingGoodsBatches();

            // 显示成功消息
            await JSRuntime.InvokeVoidAsync("alert", "成功新建batch");

            // 自动选择新创建的batch
            selectedGoodsBatch = newGoodsBatch;

            // 重置表单和状态
            isCreatingNew = false;

            // 更新UI以反映选择的新batch
            await InvokeAsync(() =>
            {
                StateHasChanged();
                JSRuntime.InvokeVoidAsync("setSelectValue", "existingBatch", selectedGoodsBatch.GoodsBatchID.ToString());
            });
        }

        private async Task SelectExistingGoodsBatch(ChangeEventArgs e)
        {
            if (int.TryParse(e.Value.ToString(), out int batchId))
            {
                using var context = await DbFactory.CreateDbContextAsync();
                selectedGoodsBatch = await context.GoodsBatch.FindAsync(batchId);
            }
            else
            {
                selectedGoodsBatch = null;
            }
        }

        private string GetDeliveryStatusString(int status)
        {
            return status switch
            {
                0 => "未成团",
                1 => "待收款",
                2 => "未到货",
                3 => "可发货",
                _ => "未知状态"
            };
        }

        private DateTime CombineDateAndTime(DateTime date, string time)
        {
            if (TimeSpan.TryParse(time, out TimeSpan timeSpan))
            {
                return date.Date + timeSpan;
            }
            return date;
        }

        private void ResetForm()
        {
            newGoodsBatch = new GoodsBatch();
            beginDate = DateTime.Today;
            beginTime = "00:00";
            endDate = DateTime.Today;
            endTime = "23:59";
        }

        private List<GoodsType> availableTypes = new List<GoodsType>(); // 用于存储可用的类型
        private List<GoodsType> selectedTypes = new List<GoodsType>(); // 用于存储选定的类型

        private async Task OpenTypeSelectionModal()
        {
            await LoadAvailableTypes();
            // 逻辑以显示模态框
        }

        private async Task LoadAvailableTypes()
        {
            using var context = await DbFactory.CreateDbContextAsync();
            availableTypes = await context.GoodsType.ToListAsync(); // 假设 GoodsType 是 DbSet
        }

        private async Task AddSelectedTypes()
        {
            using var context = await DbFactory.CreateDbContextAsync();
            foreach (var type in selectedTypes)
            {
                var batchToType = new BatchToType
                {
                    GoodsBatchID = selectedGoodsBatch.GoodsBatchID,
                    GoodsTypeID = type.GoodsTypeID // 使用 GoodsTypeID 作为外键
                };
                context.BatchToType.Add(batchToType);
            }
            await context.SaveChangesAsync();
            await LoadExistingGoodsBatches(); // 刷新批次列表
        }

        private async Task<List<GoodsType>> GetTypesForSelectedBatch()
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var typeIds = await context.BatchToType
                .Where(b => b.GoodsBatchID == selectedGoodsBatch.GoodsBatchID)
                .Select(b => b.GoodsTypeID)
                .ToListAsync();

            var types = await context.GoodsType
                .Where(t => typeIds.Contains(t.GoodsTypeID))
                .ToListAsync();

            return types;
        }

        private List<GoodsType> currentBatchTypes = new List<GoodsType>(); // 用于存储当前批次的类型

        private void ToggleTypeSelection(GoodsType type, object isChecked)
        {
            if ((bool)isChecked)
            {
                selectedTypes.Add(type);
            }
            else
            {
                selectedTypes.Remove(type);
            }
        }

        private void NavigateToCreateType()
        {
            NavigationManager.NavigateTo("/goodstypes/create"); // 假设新建类型的页面路径为 /create-type
        }

        private bool isAddingNewType = false; // 控制新类型输入区域的显示
        private string newTypeName; // 用于存储新类型的名称

        private void ShowNewTypeInput()
        {
            isAddingNewType = true; // 显示新类型输入区域
        }

        private async Task CreateNewType()
        {
            // 在这里添加创建新类型的逻辑
            using var context = await DbFactory.CreateDbContextAsync();
            var newType = new GoodsType { GoodsTypeName = newTypeName };
            context.GoodsType.Add(newType);
            await context.SaveChangesAsync();

            // 重新加载可用类型
            await LoadAvailableTypes();

            // 选中刚刚新建的类型
            selectedTypes.Add(newType);

            // 隐藏新类型输入区域
            isAddingNewType = false;

            // 清空输入框
            newTypeName = string.Empty;
        }

        private void CancelNewType()
        {
            isAddingNewType = false; // 隐藏新类型输入区域
            newTypeName = string.Empty; // 清空输入框
        }
    }
}