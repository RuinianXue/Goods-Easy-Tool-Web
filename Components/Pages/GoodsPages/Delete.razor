@page "/goods/delete"
@using Microsoft.EntityFrameworkCore
@using GoodsWebApp.Models
@inject IDbContextFactory<GoodsWebApp.Data.GoodsWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Goods</h2>
    <hr />
    @if (goods is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">GoodsTypeID</dt>
            <dd class="col-sm-10">@goods.GoodsTypeID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GoodsCharacter</dt>
            <dd class="col-sm-10">@goods.GoodsCharacter</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GoodsCountEqual</dt>
            <dd class="col-sm-10">@goods.GoodsCountEqual</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GoodsBoundEqual</dt>
            <dd class="col-sm-10">@goods.GoodsBoundEqual</dd>
        </dl>
        <EditForm method="post" Model="goods" OnValidSubmit="DeleteGoods" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(goods is null)">Delete</button> |
            <a href="/goods">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Goods? goods;

    [SupplyParameterFromQuery]
    private int GoodsID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        goods = await context.Goods.FirstOrDefaultAsync(m => m.GoodsID == GoodsID);

        if (goods is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteGoods()
    {
        using var context = DbFactory.CreateDbContext();
        context.Goods.Remove(goods!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/goods");
    }
}
