// <auto-generated />
using GoodsWebApp.Models;
using Microsoft.AspNetCore.Components;
using Microsoft.EntityFrameworkCore;
using Microsoft.JSInterop;
using System.Text.Json;

namespace GoodsWebApp.Components
{
    public partial class BatchSelector
    {
        private const string filePath = "./oneclick-status-record.json"; // 指定文件路径

        
        private async Task NextStep()
        {
            // 保存选择的批次到 JSON 文件
            //var selectedBatch = existingGoodsBatches.FirstOrDefault(b => b.GoodsBatchID == selectedBatchId);
            Console.WriteLine(selectedBatchId);
            if (selectedBatchId != null)
            {
                var json = JsonSerializer.Serialize(selectedBatchId);

                // 读取现有数据
                var existingData = await File.ReadAllTextAsync(filePath);
                var dataObject = JsonSerializer.Deserialize<Dictionary<string, object>>(existingData);

                // 更新步骤计数
                if (dataObject != null && dataObject.ContainsKey("StepCount"))
                {
                    dataObject["StepCount"] = 1; // 步骤计数
                }
                dataObject["SelectedBatch"] = selectedBatchId; // 添加 selectedBatch 的记录
                // 写入更新后的数据
                await File.WriteAllTextAsync(filePath, JsonSerializer.Serialize(dataObject));
            }
            await OnNextStep.InvokeAsync(selectedBatchId); // 传递当前选择的批次编号
            NavigationManager.NavigateTo("/add-goods-auto/type-choose");
        }
        private bool isCreatingNew = false;
        [Parameter] public EventCallback<int?> OnNextStep { get; set; }
        [SupplyParameterFromForm]
        private GoodsBatch newGoodsBatch { get; set; } = new();
        private List<GoodsBatch> existingGoodsBatches = new List<GoodsBatch>();
        private GoodsBatch selectedGoodsBatch;

        private DateTime beginDate = DateTime.Today;
        private string beginTime = "00:00";
        private DateTime endDate = DateTime.Today;
        private string endTime = "23:59";

        private void InitializeNewGoodsBatch()
        {
            newGoodsBatch = new GoodsBatch
            {
                GoodsBatchName = DateTime.Now.ToString("yyyyMMdd-"),
                // 其他属性可以根据需要设置默认值
            };
            beginDate = DateTime.Today; // 设置开始日期为今天
            beginTime = DateTime.Now.ToString("HH:mm"); // 设置开始时间为当前时间
            endDate = DateTime.Today.AddDays(7); // 设置结束日期为一周后
            endTime = beginTime; // 设置结束时间为与开始时间相同
        }

        protected override async Task OnInitializedAsync()
        {
            // 检查文件是否存在
            if (!File.Exists(filePath))
            {
                // 如果文件不存在，则创建并初始化步骤计数
                var initialData = new { StepCount = 0 }; // 初始步骤计数
                var initialJson = JsonSerializer.Serialize(initialData);
                await File.WriteAllTextAsync(filePath, initialJson);
            }
            else
            {
                // 如果文件存在，读取现有数据并重置步骤计数为 0
                var existingData = await File.ReadAllTextAsync(filePath);
                var dataObject = JsonSerializer.Deserialize<Dictionary<string, object>>(existingData);

                // 重置步骤计数
                if (dataObject != null && dataObject.ContainsKey("StepCount"))
                {
                    dataObject["StepCount"] = 0; // 重置步骤计数为 0
                }

                // 写入更新后的数据
                await File.WriteAllTextAsync(filePath, JsonSerializer.Serialize(dataObject));
            }
            await LoadExistingGoodsBatches();
            await SelectDefaultGoodsBatch();
            //currentBatchTypes = await GetTypesForSelectedBatch(); // 获取当前批次的类型
            InitializeNewGoodsBatch(); // 初始化新的GoodsBatch
        }
        //private List<GoodsType> currentBatchTypes = new List<GoodsType>(); // 用于存储当前批次的类型

        private async Task LoadExistingGoodsBatches()
        {
            try
            {
                using var context = await DbFactory.CreateDbContextAsync();
                existingGoodsBatches = await context.GoodsBatch
                    .OrderByDescending(b => b.GoodsBeginTime.Date)
                    .ThenBy(b => b.GoodsBatchName)
                    .ToListAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading existing GoodsBatches: {ex.Message}");
                // 可以在这里添加更多的错误处理逻辑
            }
        }

        private async Task SelectDefaultGoodsBatch()
        {
            if (existingGoodsBatches.Any())
            {
                var latestDate = existingGoodsBatches.First().GoodsBeginTime.Date;
                selectedGoodsBatch = existingGoodsBatches
                    .Where(b => b.GoodsBeginTime.Date == latestDate)
                    .OrderByDescending(b => b.GoodsBatchName)
                    .First();

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                    JSRuntime.InvokeVoidAsync("setSelectValue", "existingBatch", selectedGoodsBatch.GoodsBatchID.ToString());
                });
            }
        }

        private int? selectedBatchId; // 新增变量，用于存储当前选择的批次编号

        private void OnBatchSelectionChange(ChangeEventArgs e)
        {
            isCreatingNew = e.Value.ToString() == "new";
            selectedBatchId = null; // 重置选择的批次编号
            if (isCreatingNew)
            {
                InitializeNewGoodsBatch();
            }
            else if (int.TryParse(e.Value.ToString(), out int batchId))
            {
                selectedBatchId = batchId; // 存储选择的批次编号
            }
        }


        private async Task CreateNewGoodsBatch()
        {
            // 合并日期和时间
            newGoodsBatch.GoodsBeginTime = CombineDateAndTime(beginDate, beginTime);
            newGoodsBatch.GoodsEndTime = CombineDateAndTime(endDate, endTime);

            using var context = await DbFactory.CreateDbContextAsync();
            context.GoodsBatch.Add(newGoodsBatch);
            await context.SaveChangesAsync();
            await LoadExistingGoodsBatches();

            // 存储新创建的批次编号到 tmpselect.json
            var json = JsonSerializer.Serialize(new { GoodsBatchID = newGoodsBatch.GoodsBatchID });

            // 确保使用正确的路径并创建文件（如果不存在）
            //var filePath = "tmpselect.json"; // 确保路径正确
            //await File.WriteAllTextAsync(filePath, json); // 这将创建文件（如果不存在）

            // 显示成功消息
            await JSRuntime.InvokeVoidAsync("alert", "成功新建batch");

            // 自动选择新创建的batch
            selectedGoodsBatch = newGoodsBatch;

            // 重置表单和状态
            isCreatingNew = false;

            // 更新UI以反映选择的新batch
            await InvokeAsync(() =>
            {
                StateHasChanged();
                JSRuntime.InvokeVoidAsync("setSelectValue", "existingBatch", selectedGoodsBatch.GoodsBatchID.ToString());
            });
        }

        private async Task SelectExistingGoodsBatch(ChangeEventArgs e)
        {
            if (int.TryParse(e.Value.ToString(), out int batchId))
            {
                using var context = await DbFactory.CreateDbContextAsync();
                selectedGoodsBatch = await context.GoodsBatch.FindAsync(batchId);
                selectedBatchId = batchId;
            }
            else
            {
                selectedBatchId = null;
                selectedGoodsBatch = null;
            }
        }

        private string GetDeliveryStatusString(int status)
        {
            return status switch
            {
                0 => "未成团",
                1 => "待收款",
                2 => "未到货",
                3 => "可发货",
                _ => "未知状态"
            };
        }

        private DateTime CombineDateAndTime(DateTime date, string time)
        {
            if (TimeSpan.TryParse(time, out TimeSpan timeSpan))
            {
                return date.Date + timeSpan;
            }
            return date;
        }

        private void ResetForm()
        {
            newGoodsBatch = new GoodsBatch();
            beginDate = DateTime.Today;
            beginTime = "00:00";
            endDate = DateTime.Today;
            endTime = "23:59";
        }

    }
}